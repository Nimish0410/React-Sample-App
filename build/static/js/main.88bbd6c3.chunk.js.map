{"version":3,"sources":["components/card/card.component.jsx","components/cardList/cardList.component.jsx","components/searchField/searchField.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchField","placeholder","handleChange","type","onChange","App","evt","searchValue","target","value","setState","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAGaA,G,kBAAO,SAACC,GACjB,OACI,yBAAKC,UAAY,kBACb,yBAAKC,IAAM,4BAA4BC,IAAG,mCAAgCH,EAAMI,QAAQC,GAA9C,4BAC1C,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCIfC,EARE,SAACR,GACd,OACI,yBAAKC,UAAY,aAChBD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAAY,kBAAC,EAAD,CAAMO,IAAOP,EAAQC,GAAID,QAAWA,SCJ/DQ,G,MAAc,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACtC,OACI,2BAAOb,UAAW,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCgCtEG,E,YA/Bb,aAAc,IAAD,8BACX,+CAWFH,aAAe,SAACI,GACd,IAAMC,EAAcD,EAAIE,OAAOC,MAC/B,EAAKC,SAAS,CAACH,iBAZf,EAAKI,MAAQ,CACXd,SAAW,GACXU,YAAa,IAJJ,E,iFAOQ,IAAD,OAClBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKN,SAAS,CAACb,SAAUmB,S,+BAQhC,IAAD,EACyBC,KAAKN,MAA9Bd,EADA,EACAA,SAAUU,EADV,EACUA,YACXW,EAAmBrB,EAASsB,QAAO,SAAC3B,GAAD,OAAYA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBACrG,OACA,yBAAK/B,UAAU,OACf,+CACA,kBAAC,EAAD,CAAaY,YAAc,kBAAkBC,aAAgBe,KAAKf,eAClE,kBAAC,EAAD,CAAUL,SAAWqB,S,GA1BPI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.88bbd6c3.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) => {\n    return (\n        <div className = \"card-container\">\n            <img alt = \"Click too see the monster\" src = {`https://www.robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}","import React from 'react'\nimport './cardList.styles.css'\nimport { Card } from '../card/card.component'\n\nconst CardList = (props) => {\n    return (\n        <div className = 'card-list'>\n        {props.monsters.map((monster)=> <Card key = {monster.id} monster = {monster} /> )}\n        </div>\n    )\n}\n\nexport default CardList;\n","import React from 'react'\nimport './searchField.styles.css'\n\nexport const SearchField = ({placeholder, handleChange}) => {\n    return (\n        <input className= \"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\n    )\n}","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/cardList/cardList.component'\nimport  { SearchField } from './components/searchField/searchField.component'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters : [],\n      searchValue: '' // lifting state up as CardList component needs the state and not keeping in searchField component\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n  handleChange = (evt) => {\n    const searchValue = evt.target.value;\n    this.setState({searchValue})\n  }\n  /* always provide key to the elements returned from the list, it helps react identify what \n  element chnaged and does not rerender the entire list but only the chnaged element */\n  render() {\n    const {monsters, searchValue} = this.state;\n    const filteredMonsters = monsters.filter((monster)=> monster.name.toLowerCase().includes(searchValue.toLowerCase()))\n    return (\n    <div className=\"App\">\n    <h1>Monster Rolodex</h1>\n    <SearchField placeholder = \"search monsters\" handleChange = {this.handleChange}/>\n    <CardList monsters= {filteredMonsters}/>\n    </div>\n    )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}